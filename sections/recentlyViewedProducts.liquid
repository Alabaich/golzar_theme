{% comment %}
  ** Recently Viewed Products Section **
  - Uses JavaScript and the browser's localStorage to track viewed products.
  - Fetches product data asynchronously to avoid slowing down page loads.
  - The section will automatically hide itself if there are no products to show.
  - CSS now uses theme variables for design consistency.
{% endcomment %}

{%- if section.settings.show_recently_viewed -%}
    <section
      class="recently-viewed-section"
      id="recently-viewed-section-{{ section.id }}"
      data-section-id="{{ section.id }}"
      data-max-products="{{ section.settings.max_products }}"
      {% if template.name == 'product' %}
        data-current-product-handle="{{ product.handle }}"
      {% endif %}
      style="display: none;"
    >
      <div class="recently-viewed-container page-width pageWidth">
        {% if section.settings.heading != blank %}
          <h2 class="recently-viewed-main-heading title">
            {{ section.settings.heading | escape }}
          </h2>
        {% endif %}
  
        <div class="recently-viewed-grid" id="recently-viewed-grid-{{ section.id }}">
          {% comment %} Products will be injected here by JavaScript {% endcomment %}
        </div>
      </div>
    </section>
  
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const sectionEl = document.getElementById('recently-viewed-section-{{ section.id }}');
        const gridEl = document.getElementById('recently-viewed-grid-{{ section.id }}');
        
        const LS_KEY = 'shopify_recently_viewed';
        const MAX_PRODUCTS = parseInt(sectionEl.dataset.maxProducts, 10) || 4;
        const currentProductHandle = sectionEl.dataset.currentProductHandle || null;
  
        let recentlyViewedHandles = [];
        try {
          const storedHandles = localStorage.getItem(LS_KEY);
          if (storedHandles) {
            recentlyViewedHandles = JSON.parse(storedHandles);
          }
        } catch (error) {
          console.error('Error parsing recently viewed products from localStorage:', error);
        }
        
        if (currentProductHandle) {
          const index = recentlyViewedHandles.indexOf(currentProductHandle);
          if (index > -1) {
            recentlyViewedHandles.splice(index, 1);
          }
          recentlyViewedHandles.unshift(currentProductHandle);
          if (recentlyViewedHandles.length > MAX_PRODUCTS + 1) {
            recentlyViewedHandles.pop();
          }
          try {
            localStorage.setItem(LS_KEY, JSON.stringify(recentlyViewedHandles));
          } catch (error) {
            console.error('Error saving recently viewed products to localStorage:', error);
          }
        }
  
        const handlesToDisplay = recentlyViewedHandles.filter(handle => handle !== currentProductHandle).slice(0, MAX_PRODUCTS);
        
        if (handlesToDisplay.length > 0) {
          sectionEl.style.display = 'flex';
  
          handlesToDisplay.forEach(handle => {
            fetch(`/products/${handle}.js`)
              .then(response => {
                if (!response.ok) { throw new Error('Product not found'); }
                return response.json();
              })
              .then(product => {
                const onSale = product.compare_at_price && product.compare_at_price > product.price;
                const price = new Intl.NumberFormat('en-US', { style: 'currency', currency: '{{ cart.currency.iso_code }}' }).format(product.price / 100);
                const compareAtPrice = onSale ? new Intl.NumberFormat('en-US', { style: 'currency', currency: '{{ cart.currency.iso_code }}' }).format(product.compare_at_price / 100) : '';
  
                const productImages = product.media.filter(m => m.media_type === 'image');
                const featuredImage = productImages.length > 0 ? productImages[0] : null;
                const secondImage = productImages.length > 1 ? productImages[1] : null;
  
                if (!featuredImage) return;
  
                const cardHtml = `
                  <div class="rv-grid-item">
                    <a href="${product.url}" class="rv-product-card">
                      <div class="rv-product-image-wrapper">
                        <img
                          src="${featuredImage.src}?width=400"
                          alt="${featuredImage.alt || product.title}"
                          loading="lazy"
                          class="rv-first-image"
                        >
                        ${secondImage ? `
                          <img
                            src="${secondImage.src}?width=400"
                            alt="${secondImage.alt || product.title}"
                            loading="lazy"
                            class="rv-second-image"
                          >
                        ` : ''}
                        ${onSale ? '<div class="rv-sale-badge">Sale</div>' : ''}
                        ${product.vendor ? `<div class="rv-product-vendor">${product.vendor}</div>` : ''}
                      </div>
                      <div class="rv-product-info">
                        <h3 class="rv-product-title">${product.title}</h3>
                        <div class="rv-product-price">
                          ${compareAtPrice ? `<s class="rv-compare-price">${compareAtPrice}</s>` : ''}
                          <span class="rv-final-price">${price}</span>
                        </div>
                      </div>
                    </a>
                  </div>
                `;
                gridEl.innerHTML += cardHtml;
              })
              .catch(error => {
                console.warn(`Could not load recently viewed product with handle: ${handle}`, error);
              });
          });
        }
      });
    </script>
  
    <style>
      .recently-viewed-section {
        --card-text-color: rgb(var(--color-foreground));
        --card-background-color: rgb(var(--color-background));
        --card-border-color: rgb(var(--color-border));
        --card-corner-radius: var(--card-corner-radius, 6px);
        --card-shadow-hover: var(--shadow-hover);
  
        padding: 50px 0;
        background-color: var(--card-background-color);
        width: 100%;
        display: none; /* Hidden by default, shown by JS */
        justify-content: center;
      }
      .recently-viewed-main-heading.title {
        text-align: center;
        font-size: 2.5rem;
        margin-bottom: 40px;
        color: #1a1a1a;
      }
      .recently-viewed-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 30px;
      }
      .rv-product-card {
        background-color: var(--card-background-color);
        border-radius: var(--card-corner-radius);
        text-decoration: none;
        color: var(--card-text-color);
        display: flex;
        flex-direction: column;
        height: 100%;
        transition: box-shadow 0.2s ease;
        position: relative;
      }
      .rv-product-card:hover {
        box-shadow: var(--card-shadow-hover);
      }
      .rv-product-image-wrapper {
        width: 100%;
        padding-top: 100%; /* 1:1 aspect ratio */
        position: relative;
        background-color: rgba(var(--color-foreground), 0.03);
        border-radius: var(--card-corner-radius);
        overflow: hidden;
      }
      .rv-product-image-wrapper img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: var(--card-corner-radius);
        transition: opacity 0.3s ease-in-out;
      }
      /* --- HOVER EFFECT --- */
      .rv-second-image {
        opacity: 0;
      }
      .rv-product-card:hover .rv-second-image {
        opacity: 1;
      }
      .rv-product-card:hover .rv-first-image {
        opacity: 0;
      }
      /* --- BADGES --- */
      .rv-sale-badge {
        box-shadow: 1px 5px 20px #b8b8b8 !important;
    font-weight: 400;
    background: #002642 !important;
    -webkit-font-smoothing: antialiased;
    border-radius: 30px;
    min-width: 3.5em;
    width: 30%;
    color: #fff;
    text-align: center;
    font-size: 13px;
    min-height: 2.5em;
    display: flex
;        line-height: normal;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 10px;
    right: 10px;
    font-family: Open Sans, serif;
      }
      .rv-product-vendor {
        line-height: normal;
        position: absolute;
        z-index: 2;
        top: 10px;
        left: 10px;
        background-color: #fff;
        color: #334155;
        font-size: .87em;
        padding: .4em .8em;
        border-radius: 100px;
        box-shadow: 0 4px 4px #00000026;
      }
      .rv-product-info {
        padding: 15px 5px;
      }
      .rv-product-title {
        font-size: 16px;
        color: #000;
        text-transform: capitalize;
        line-height: 1.3em;
        text-align: left;
        margin: 0 0 8px 0;
      }
      .rv-product-price {
        font-family: 'Montserrat', sans-serif;
        display: flex;
        justify-content: start;
        align-items: baseline;
        gap: 8px;
      }
      .rv-final-price {
        font-weight: 500;
        font-size: 17px;
      }
      .rv-compare-price {
        font-size: 17px;
        font-weight: 400;
        color: #053f58;
        opacity: .5;
        text-decoration: line-through;
      }
  
      @media (max-width: 990px) {
        .recently-viewed-grid {
          grid-template-columns: repeat(3, 1fr);
        }
      }
      @media (max-width: 750px) {
        .recently-viewed-grid {
          grid-template-columns: repeat(2, 1fr);
          gap: 15px;
        }

        .rv-product-price {
        flex-direction: column;
      }
      }
    </style>
  {%- endif -%}
  
  {% schema %}
  {
    "name": "Recently Viewed Products",
    "tag": "section",
    "class": "shopify-section-recently-viewed",
    "settings": [
      {
        "type": "checkbox",
        "id": "show_recently_viewed",
        "label": "Show Recently Viewed Products section",
        "default": true
      },
      {
        "type": "text",
        "id": "heading",
        "label": "Heading",
        "default": "Recently Viewed"
      },
      {
        "type": "range",
        "id": "max_products",
        "min": 2,
        "max": 8,
        "step": 1,
        "label": "Max products to show",
        "default": 4
      }
    ],
    "presets": [
      {
        "name": "Recently Viewed Products"
      }
    ]
  }
  {% endschema %}
  
  