{% comment %}
  ** Recently Viewed Products Section **
  - This version is designed to perfectly match the theme's native product card styles.
  - It uses the theme's component CSS files instead of custom styles.
  - It renders a product card using a structure identical to the 'card-product' snippet.
{% endcomment %}

{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- if section.settings.show_recently_viewed -%}
  <div class="color-{{ section.settings.color_scheme }} gradient">
    <section
      class="recently-viewed-section page-width section-{{ section.id }}-padding"
      id="recently-viewed-section-{{ section.id }}"
      data-max-products="{{ section.settings.products_to_show }}"
      {% if template.name == 'product' %}
        data-current-product-handle="{{ product.handle }}"
      {% endif %}
      style="display: none;"
    >
      {% if section.settings.heading != blank %}
        <h2 class="recently-viewed-main-heading inline-richtext {{ section.settings.heading_size }}">
          {{ section.settings.heading | escape }}
        </h2>
      {% endif %}

      <ul
        class="grid product-grid grid--{{ section.settings.columns_desktop }}-col-desktop grid--{{ section.settings.columns_mobile }}-col-tablet-down"
        id="recently-viewed-grid-{{ section.id }}"
        role="list"
      >
        {% comment %} Product cards will be injected here by JavaScript as <li> elements {% endcomment %}
      </ul>
    </section>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const sectionEl = document.getElementById('recently-viewed-section-{{ section.id }}');
      const gridEl = document.getElementById('recently-viewed-grid-{{ section.id }}');
      
      const LS_KEY = 'shopify_recently_viewed';
      const MAX_PRODUCTS = parseInt(sectionEl.dataset.maxProducts, 10) || 4;
      const currentProductHandle = sectionEl.dataset.currentProductHandle || null;

      // 1. Get existing product handles from localStorage
      let recentlyViewedHandles = [];
      try {
        const storedHandles = localStorage.getItem(LS_KEY);
        if (storedHandles) {
          recentlyViewedHandles = JSON.parse(storedHandles);
        }
      } catch (error) {
        console.error('Error parsing recently viewed products from localStorage:', error);
      }
      
      // 2. If we are on a product page, add its handle
      if (currentProductHandle) {
        const index = recentlyViewedHandles.indexOf(currentProductHandle);
        if (index > -1) {
          recentlyViewedHandles.splice(index, 1);
        }
        recentlyViewedHandles.unshift(currentProductHandle);
        if (recentlyViewedHandles.length > MAX_PRODUCTS + 1) {
          recentlyViewedHandles.pop();
        }
        localStorage.setItem(LS_KEY, JSON.stringify(recentlyViewedHandles));
      }

      // 3. Filter out the current product from the display list
      const handlesToDisplay = recentlyViewedHandles.filter(handle => handle !== currentProductHandle).slice(0, MAX_PRODUCTS);
      
      // 4. If there are products to display, fetch and render them
      if (handlesToDisplay.length > 0) {
        sectionEl.style.display = 'block';

        handlesToDisplay.forEach(handle => {
          fetch(`/products/${handle}.js`)
            .then(response => response.json())
            .then(product => {
              const onSale = product.compare_at_price && product.compare_at_price > product.price;
              const price = new Intl.NumberFormat('en-CA', { style: 'currency', currency: '{{ cart.currency.iso_code }}' }).format(product.price / 100);
              const compareAtPrice = onSale ? new Intl.NumberFormat('en-CA', { style: 'currency', currency: '{{ cart.currency.iso_code }}' }).format(product.compare_at_price / 100) : '';

              const cardHtml = `
                <div class="card-wrapper underline-links-hover">
                  <div class="card card--standard card--media">
                    <div class="card__inner color-{{ section.settings.card_color_scheme }} gradient ratio">
                      <div class="card__media">
                        <div class="media media--transparent media--hover-effect">
                          <img
                            src="${product.featured_image}?width=550"
                            alt="${product.featured_image.alt || product.title}"
                            class="motion-reduce"
                            loading="lazy"
                            width="550"
                            height="${550 / product.featured_image.aspect_ratio}"
                          >
                        </div>
                      </div>
                      <div class="card__content">
                        <div class="card__information">
                          <h3 class="card__heading">
                            <a href="${product.url}" class="full-unstyled-link">${product.title}</a>
                          </h3>
                        </div>
                      </div>
                    </div>
                    <div class="card__badge bottom left">
                      ${onSale ? `<span class="badge badge--on-sale">Sale</span>` : ''}
                    </div>
                  </div>
                   <div class="card-information">
                      <span class="caption-large light">${product.vendor}</span>
                      <div class="price">
                         <div class="price__container">
                           <div class="price__regular">
                             <span class="visually-hidden">Regular price</span>
                             <span class="price-item price-item--regular">${price}</span>
                           </div>
                           <div class="price__sale">
                             ${onSale ? `<span class="visually-hidden">Sale price</span><span class="price-item price-item--sale price-item--last">${price}</span>` : ''}
                             ${onSale ? `<span class="visually-hidden">Regular price</span><s><span class="price-item price-item--regular">${compareAtPrice}</span></s>` : ''}
                           </div>
                         </div>
                       </div>
                    </div>
                </div>
              `;
              
              const listItem = document.createElement('li');
              listItem.className = 'grid__item';
              listItem.innerHTML = cardHtml;
              gridEl.appendChild(listItem);
            })
            .catch(error => {
              console.warn(`Could not load recently viewed product with handle: ${handle}`, error);
            });
        });
      }
    });
  </script>
{%- endif -%}

{% schema %}
{
  "name": "Recently Viewed Products",
  "tag": "section",
  "class": "shopify-section-recently-viewed",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_recently_viewed",
      "label": "Show Recently Viewed Products section",
      "default": true
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently Viewed"
    },
    {
      "type": "select",
      "id": "heading_size",
      "label": "Heading size",
      "options": [
        {
          "value": "h2",
          "label": "Small"
        },
        {
          "value": "h1",
          "label": "Medium"
        },
        {
          "value": "h0",
          "label": "Large"
        }
      ],
      "default": "h1"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 8,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 2,
      "max": 5,
      "step": 1,
      "label": "Number of columns on desktop",
      "default": 4
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "options": [
        {
          "value": "1",
          "label": "1 column"
        },
        {
          "value": "2",
          "label": "2 columns"
        }
      ],
      "default": "2",
      "label": "Number of columns on mobile"
    },
    {
      "type": "header",
      "content": "Color"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Section color scheme"
    },
    {
      "type": "color_scheme",
      "id": "card_color_scheme",
      "label": "Card color scheme"
    },
    {
      "type": "header",
      "content": "Section Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed Products"
    }
  ]
}
{% endschema %}

