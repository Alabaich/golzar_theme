{% comment %}
  ** Recently Viewed Products Section **
  - Uses JavaScript and the browser's localStorage to track viewed products.
  - Fetches product data asynchronously to avoid slowing down page loads.
  - The section will automatically hide itself if there are no products to show.
  - Fully self-contained with HTML, JavaScript, CSS, and Schema settings.
{% endcomment %}

{%- if section.settings.show_recently_viewed -%}
    <section
      class="recently-viewed-section"
      id="recently-viewed-section-{{ section.id }}"
      data-section-id="{{ section.id }}"
      data-max-products="{{ section.settings.max_products }}"
      {% if template.name == 'product' %}
        data-current-product-handle="{{ product.handle }}"
      {% endif %}
    >
      <div class="recently-viewed-container">
        {% if section.settings.heading != blank %}
          <h2 class="recently-viewed-main-heading">
            {{ section.settings.heading | escape }}
          </h2>
        {% endif %}
  
        <div class="recently-viewed-grid" id="recently-viewed-grid-{{ section.id }}">
          {% comment %} Products will be injected here by JavaScript {% endcomment %}
        </div>
      </div>
    </section>
  
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const sectionEl = document.getElementById('recently-viewed-section-{{ section.id }}');
        const gridEl = document.getElementById('recently-viewed-grid-{{ section.id }}');
        
        const LS_KEY = 'shopify_recently_viewed';
        const MAX_PRODUCTS = parseInt(sectionEl.dataset.maxProducts, 10) || 4;
        const currentProductHandle = sectionEl.dataset.currentProductHandle || null;
  
        // 1. Get existing product handles from localStorage
        let recentlyViewedHandles = [];
        try {
          const storedHandles = localStorage.getItem(LS_KEY);
          if (storedHandles) {
            recentlyViewedHandles = JSON.parse(storedHandles);
          }
        } catch (error) {
          console.error('Error parsing recently viewed products from localStorage:', error);
          recentlyViewedHandles = [];
        }
        
        // 2. If we are on a product page, add its handle to the list
        if (currentProductHandle) {
          // Remove the handle if it already exists, to move it to the front
          const index = recentlyViewedHandles.indexOf(currentProductHandle);
          if (index > -1) {
            recentlyViewedHandles.splice(index, 1);
          }
  
          // Add the current product handle to the beginning of the array
          recentlyViewedHandles.unshift(currentProductHandle);
  
          // Trim the array to the max number of products
          if (recentlyViewedHandles.length > MAX_PRODUCTS + 1) { // +1 to account for the current product
            recentlyViewedHandles.pop();
          }
  
          // Save the updated list back to localStorage
          try {
            localStorage.setItem(LS_KEY, JSON.stringify(recentlyViewedHandles));
          } catch (error) {
            console.error('Error saving recently viewed products to localStorage:', error);
          }
        }
  
        // 3. Filter out the current product from the display list
        const handlesToDisplay = recentlyViewedHandles.filter(handle => handle !== currentProductHandle).slice(0, MAX_PRODUCTS);
        
        // 4. If there are products to display, fetch and render them
        if (handlesToDisplay.length > 0) {
          sectionEl.style.display = 'block';
          let productsRendered = 0;
  
          handlesToDisplay.forEach(handle => {
            fetch(`/products/${handle}.js`)
              .then(response => {
                if (!response.ok) { throw new Error('Product not found'); }
                return response.json();
              })
              .then(product => {
                // Build the product card HTML
                const price = new Intl.NumberFormat('en-US', { style: 'currency', currency: '{{ cart.currency.iso_code }}' }).format(product.price / 100);
                const compareAtPrice = product.compare_at_price ? new Intl.NumberFormat('en-US', { style: 'currency', currency: '{{ cart.currency.iso_code }}' }).format(product.compare_at_price / 100) : '';
  
                const cardHtml = `
                  <a href="${product.url}" class="rv-product-card">
                    <div class="rv-product-image-wrapper">
                      <img
                        src="${product.featured_image}?width=300"
                        alt="${product.featured_image.alt || product.title}"
                        loading="lazy"
                        width="300"
                        height="300"
                      >
                    </div>
                    <div class="rv-product-info">
                      <h3 class="rv-product-title">${product.title}</h3>
                      <div class="rv-product-price">
                        <span>${price}</span>
                        ${compareAtPrice ? `<s class="rv-compare-price">${compareAtPrice}</s>` : ''}
                      </div>
                    </div>
                  </a>
                `;
                gridEl.innerHTML += cardHtml;
                productsRendered++;
              })
              .catch(error => {
                console.warn(`Could not load recently viewed product with handle: ${handle}`, error);
              });
          });
        }
      });
    </script>
  
    <style>
      .recently-viewed-section {
        padding: 50px 20px;
        background-color: #f9f9f9;
      }
      .recently-viewed-container {
        max-width: 1200px;
        margin: 0 auto;
      }
      .recently-viewed-main-heading {
        text-align: center;
        font-size: 2.2rem;
        margin-bottom: 40px;
        color: #1a1a1a;
      }
      .recently-viewed-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 20px;
      }
      .rv-product-card {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        overflow: hidden;
        text-decoration: none;
        color: #333;
        display: flex;
        flex-direction: column;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
      }
      .rv-product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0,0,0,0.08);
      }
      .rv-product-image-wrapper {
        width: 100%;
        padding-top: 100%; /* Creates a 1:1 aspect ratio */
        position: relative;
        background-color: #eee;
      }
      .rv-product-image-wrapper img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      .rv-product-info {
        padding: 15px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }
      .rv-product-title {
        font-size: 1rem;
        font-weight: 600;
        margin: 0 0 10px 0;
      }
      .rv-product-price {
        font-size: 0.95rem;
        font-weight: 500;
      }
      .rv-compare-price {
        color: #777;
        margin-left: 8px;
      }
  
      @media (max-width: 480px) {
        .recently-viewed-grid {
          grid-template-columns: repeat(2, 1fr);
          gap: 15px;
        }
        .rv-product-title {
          font-size: 0.9rem;
        }
      }
    </style>
  {%- endif -%}
  
  {% schema %}
  {
    "name": "Recently Viewed Products",
    "tag": "section",
    "class": "shopify-section-recently-viewed",
    "settings": [
      {
        "type": "checkbox",
        "id": "show_recently_viewed",
        "label": "Show Recently Viewed Products section",
        "default": true
      },
      {
        "type": "text",
        "id": "heading",
        "label": "Heading",
        "default": "Recently Viewed"
      },
      {
        "type": "range",
        "id": "max_products",
        "min": 2,
        "max": 10,
        "step": 1,
        "label": "Max products to show",
        "default": 4
      }
    ],
    "presets": [
      {
        "name": "Recently Viewed Products"
      }
    ]
  }
  {% endschema %}
  